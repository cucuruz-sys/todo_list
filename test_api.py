import requests
import time


BASE_URL = "http://api:8084"

def test_create_todo():
    print("\nüîπ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    todo_data = {
        "title": "–ö—É—à–æ—Ç",
        "description": "–¢–æ—Ä—Ç—ã"
    }
    response = requests.post(f"{BASE_URL}/todos/", json=todo_data)
    assert response.status_code == 201, f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"
    data = response.json()
    print("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", data)
    return data["id"]


def test_get_todos():
    print("\nüîπ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
    response = requests.get(f"{BASE_URL}/todos/")
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞: {response.status_code}"
    todos = response.json()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(todos)}")
    for todo in todos:
        print(f"  - [{todo['id']}] {todo['title']} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {todo['completed']})")
    return todos


def test_update_todo(todo_id):
    print(f"\nüîπ –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID={todo_id}")
    update_data = {
        "title": "–ö—É—à–æ—Ç",
        "description": "–¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ –∫—É—à–æ—Ç —Ç–æ—Ä—Ç",
        "completed": True
    }
    response = requests.put(f"{BASE_URL}/todos/{todo_id}", json=update_data)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"
    data = response.json()
    print("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", data)
    return data


def test_delete_todo(todo_id):
    print(f"\nüîπ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID={todo_id}")
    response = requests.delete(f"{BASE_URL}/todos/{todo_id}")
    assert response.status_code == 204, f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"
    print("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


def test_long_task():
    print("\nüîπ –¢–µ—Å—Ç: –ó–∞–ø—É—Å–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏")
    response = requests.post(f"{BASE_URL}/tasks/")
    assert response.status_code == 201, f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"
    task = response.json()
    print("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞:", task)

    print("–û–∂–∏–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
    task_id = task["task_id"]

    for _ in range(5):  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å 5 —Ä–∞–∑
        time.sleep(2)
        status_response = requests.get(f"{BASE_URL}/tasks/{task_id}")
        if status_response.status_code == 200:
            status = status_response.json()
            print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {status['progress']}%, —Å—Ç–∞—Ç—É—Å: {status['status']}")
            if status["status"] == "completed":
                print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return
    print("‚ö†–ó–∞–¥–∞—á–∞ –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.")


def run_tests():
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...")
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {BASE_URL}")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
        health = requests.get(f"{BASE_URL}/")
        if health.status_code != 404:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        todo_id = test_create_todo()
        test_get_todos()
        test_update_todo(todo_id)
        test_delete_todo(todo_id)

        # –¢–µ—Å—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
        test_long_task()

        print("\n –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω:")
        print("   python -m uvicorn main:app --reload")
    except AssertionError as e:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:", e)
    except Exception as e:
        print("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", e)


if __name__ == "__main__":
    run_tests()